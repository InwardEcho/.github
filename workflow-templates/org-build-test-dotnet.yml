name: 'Organizational .NET Build, Test, and Package'

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: '.NET SDK version to use'
        required: false
        type: string
        default: '8.0.x'
      solution-path:
        description: 'Path to the solution or project file'
        required: false
        type: string
        default: '.'
      build-configuration:
        description: 'Build configuration (e.g., Release, Debug)'
        required: false
        type: string
        default: 'Release'
      artifact-name-prefix:
        description: 'Prefix for the names of uploaded artifacts'
        required: false
        type: string
        default: 'application'
      upload-artifacts:
        description: 'Set to true to upload build and test artifacts'
        required: false
        type: boolean
        default: true
    outputs:
      coverage-markdown:
        description: "Code coverage summary in Markdown format"
        value: ${{ jobs.build-and-test.outputs.coverage-markdown }}
      test-results-path:
        description: "Path to the test results directory"
        value: ${{ jobs.build-and-test.outputs.test-results-path }}
      publish-directory:
        description: "Path to the published application directory"
        value: ${{ jobs.build-and-test.outputs.publish-directory }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      coverage-markdown: ${{ steps.coverage-summary.outputs.markdown }}
      test-results-path: coverage # Directory where test results are stored
      publish-directory: ${{ steps.publish.outputs.publish-path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for tools like GitVersion

      - name: Setup .NET SDK ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          cache: true # Enables NuGet package caching by default

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.solution-path }}
        working-directory: ${{ inputs.solution-path == '.' && '.' || inputs.solution-path }}


      - name: Build
        run: dotnet build --no-restore --configuration ${{ inputs.build-configuration }} ${{ inputs.solution-path }}
        working-directory: ${{ inputs.solution-path == '.' && '.' || inputs.solution-path }}


      - name: Test
        id: test
        run: |
          dotnet test ${{ inputs.solution-path }} \
            --no-build \
            --configuration ${{ inputs.build-configuration }} \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger "trx;LogFileName=test-results.trx"
        working-directory: ${{ inputs.solution-path == '.' && '.' || inputs.solution-path }}

      - name: Code Coverage Summary
        id: coverage-summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ inputs.solution-path == '.' && './coverage/**/coverage.cobertura.xml' || format('{0}/coverage/**/coverage.cobertura.xml', inputs.solution-path) }}
          badge: true
          format: markdown
          output: both # Outputs to step output and a file

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' # This condition might not be ideal for a callable workflow directly, but the caller can control this.
        with:
          header: code-coverage-${{ inputs.artifact-name-prefix }}
          message: |
            ### Code Coverage Summary (${{ inputs.artifact-name-prefix }})
            ${{ steps.coverage-summary.outputs.markdown }}

      - name: Publish application
        id: publish
        run: |
          publish_path="./publish-output"
          dotnet publish ${{ inputs.solution-path }} \
            --configuration ${{ inputs.build-configuration }} \
            --no-build \
            --output $publish_path
          echo "publish-path=$publish_path" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.solution-path == '.' && '.' || inputs.solution-path }}

      - name: Upload Deployment Package
        if: inputs.upload-artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name-prefix }}-deployment-package
          path: ${{ inputs.solution-path == '.' && './publish-output' || format('{0}/publish-output', inputs.solution-path) }}
          retention-days: 7

      - name: Upload Test Results (TRX)
        if: inputs.upload-artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name-prefix }}-test-results-trx
          path: ${{ inputs.solution-path == '.' && './coverage/test-results.trx' || format('{0}/coverage/test-results.trx', inputs.solution-path) }}
          retention-days: 7

      - name: Upload Coverage Reports (Cobertura)
        if: inputs.upload-artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name-prefix }}-coverage-cobertura
          path: ${{ inputs.solution-path == '.' && './coverage/**/coverage.cobertura.xml' || format('{0}/coverage/**/coverage.cobertura.xml', inputs.solution-path) }}
          retention-days: 7
