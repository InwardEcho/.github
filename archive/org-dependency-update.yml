name: Organizational Dependency Update Handler

on:
  workflow_call:
    inputs:
      update_source:
        description: 'Source of the dependency update (e.g., dependabot, manual, custom-script)'
        required: false
        type: string
        default: 'dependabot'
      pr_number:
        description: 'Pull request number associated with the update (if applicable)'
        required: false
        type: string
      branch_name:
        description: 'Branch name containing the updates (e.g., main, develop, dependabot/npm_and_yarn/package-1.2.3)'
        required: true
        type: string
      commit_sha:
        description: 'Specific commit SHA of the updates. Defaults to the current GITHUB_SHA of the calling workflow.'
        required: false
        type: string
      run_tests:
        description: 'Whether to run integration tests after updates are applied/merged'
        required: false
        type: boolean
        default: true
      test_command:
        description: 'Command to run tests (e.g., npm test, dotnet test). Caller must ensure environment is set up.'
        required: false
        type: string
        default: 'echo "No test_command provided or run_tests is false."'
      notify_channel:
        description: 'Identifier for the notification channel (e.g., slack-channel-name, team-email-alias)'
        required: false
        type: string
      dependabot_config_path:
        description: 'Expected path to the dependabot.yml file for the informational check.'
        required: false
        type: string
        default: '.github/dependabot.yml'
    secrets:
      NOTIFICATION_WEBHOOK_URL:
        description: 'Webhook URL for sending notifications (e.g., for Slack, Microsoft Teams).'
        required: false

jobs:
  handle_dependency_update:
    name: Handle Dependency Update on ${{ inputs.branch_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code at specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha || github.sha }}

      - name: Record Update Information
        id: update_info
        run: |
          echo "## Dependency Update Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Source:** ${{ inputs.update_source }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** ${{ inputs.commit_sha || github.sha }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ inputs.pr_number }}" ]; then
            echo "- **Pull Request:** #${{ inputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Informational Check for dependabot.yml
        run: |
          echo "### Dependabot Configuration Check" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ inputs.dependabot_config_path }}" ]; then
            echo "✅ Dependabot configuration file found at ${{ inputs.dependabot_config_path }}." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Dependabot configuration file NOT found at ${{ inputs.dependabot_config_path }}." >> $GITHUB_STEP_SUMMARY
            echo "Consider creating a '${{ inputs.dependabot_config_path }}' file to manage automated dependency updates." >> $GITHUB_STEP_SUMMARY
            echo "Reference: https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true # This check is informational and should not fail the workflow

      - name: Setup Environment for Tests (Placeholder)
        if: inputs.run_tests == true && inputs.test_command != 'echo "No test_command provided or run_tests is false."'
        run: |
          echo "This is a placeholder for environment setup (e.g., Node.js, .NET, Java)."
          echo "The calling workflow or the test_command itself should handle specific setup."
          # Example:
          # if [[ "${{ inputs.test_command }}" == "npm"* ]]; then
          #   echo "Setting up Node.js..."
          #   # Add actions/setup-node here
          # elif [[ "${{ inputs.test_command }}" == "dotnet"* ]]; then
          #   echo "Setting up .NET..."
          #   # Add actions/setup-dotnet here
          # fi

      - name: Run Tests
        if: inputs.run_tests == true && inputs.test_command != 'echo "No test_command provided or run_tests is false."'
        run: |
          echo "Executing test command: ${{ inputs.test_command }}"
          ${{ inputs.test_command }}
        # Note: Error handling for the test command will cause this step to fail if tests fail.

      - name: Send Notification
        if: inputs.notify_channel && secrets.NOTIFICATION_WEBHOOK_URL
        env:
          JOB_STATUS: ${{ job.status }} # Get status of the current job (handle_dependency_update)
        run: |
          MESSAGE_TITLE="Dependency Update on ${{ inputs.branch_name }} (Source: ${{ inputs.update_source }})"
          MESSAGE_DETAILS="Commit: ${{ inputs.commit_sha || github.sha }}"
          if [ -n "${{ inputs.pr_number }}" ]; then
            MESSAGE_DETAILS="$MESSAGE_DETAILS | PR: #${{ inputs.pr_number }}"
          fi

          JOB_CONCLUSION_MESSAGE="Update processing status: $JOB_STATUS."
          if [ "$JOB_STATUS" == "success" ]; then
            ICON="✅"
          elif [ "$JOB_STATUS" == "failure" ]; then
            ICON="❌"
          else
            ICON="ℹ️"
          fi

          FINAL_MESSAGE="$ICON $MESSAGE_TITLE\n$MESSAGE_DETAILS\n$JOB_CONCLUSION_MESSAGE"

          echo "Sending notification to channel: ${{ inputs.notify_channel }}"
          echo -e "$FINAL_MESSAGE"
          # Example for Slack (requires a more robust action like slackapi/slack-github-action in a real scenario):
          # curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$FINAL_MESSAGE\"}" ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          echo "Notification dispatch placeholder. Implement with a dedicated action for your notification service."
          echo "Message content:"
          echo "$FINAL_MESSAGE"
        continue-on-error: true # Do not fail the entire workflow if notification fails

      - name: Final Summary
        run: |
          echo "## Dependency Update Processed" >> $GITHUB_STEP_SUMMARY
          echo "- **Outcome:** Job status is ${{ job.status }}." >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.run_tests }}" == "true" ] && [ "${{ inputs.test_command }}" != "echo \"No test_command provided or run_tests is false.\"" ]; then
            echo "- **Tests:** Attempted. Status reflected in job outcome." >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Tests:** Skipped." >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ inputs.notify_channel }}" ] && [ -n "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" ]; then
            echo "- **Notification:** Attempted to channel '${{ inputs.notify_channel }}'." >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Notification:** Skipped (no channel or webhook provided)." >> $GITHUB_STEP_SUMMARY
          fi